<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ProjectA/Data/ProjectADbContext.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectA/Data/ProjectADbContext.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectA.Models;&#10;&#10;namespace ProjectA.Data&#10;{&#10;    public class ProjectADbContext : DbContext&#10;    {&#10;        private readonly IConfiguration _configuration;&#10;&#10;        public ProjectADbContext(DbContextOptions&lt;ProjectADbContext&gt; options, IConfiguration configuration)&#10;            : base(options)&#10;        {&#10;            _configuration = configuration;&#10;        }&#10;&#10;        public DbSet&lt;Client&gt; Clients { get; set; }&#10;        public DbSet&lt;TokenManager&gt; TokenManagers { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // 直接從 Configuration 根層級讀取設定&#10;            var customSchemaName = _configuration[&quot;CustomSchemaName&quot;];&#10;            var databaseProvider = _configuration[&quot;DatabaseProvider&quot;] ?? &quot;postgresql&quot;;&#10;            &#10;            // 決定要使用的 Schema&#10;            string schemaName;&#10;            if (!string.IsNullOrEmpty(customSchemaName))&#10;            {&#10;                schemaName = customSchemaName;&#10;            }&#10;            else&#10;            {&#10;                // 根據資料庫類型決定預設 Schema&#10;                schemaName = databaseProvider.ToLower() switch&#10;                {&#10;                    &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; &quot;ProjectA&quot;,&#10;                    &quot;sqlserver&quot; =&gt; &quot;dbo&quot;,&#10;                    &quot;mysql&quot; =&gt; &quot;&quot;,&#10;                    &quot;sqlite&quot; =&gt; &quot;&quot;,&#10;                    _ =&gt; &quot;ProjectA&quot;&#10;                };&#10;            }&#10;            &#10;            if (!string.IsNullOrEmpty(schemaName))&#10;            {&#10;                modelBuilder.HasDefaultSchema(schemaName);&#10;            }&#10;&#10;            base.OnModelCreating(modelBuilder);&#10;&#10;            // Configure relationships&#10;            modelBuilder.Entity&lt;TokenManager&gt;()&#10;                .HasOne(t =&gt; t.Client)&#10;                .WithMany()&#10;                .HasForeignKey(t =&gt; t.ClientId)&#10;                .OnDelete(DeleteBehavior.Cascade);&#10;&#10;            // Set table names (schema will be applied by HasDefaultSchema)&#10;            modelBuilder.Entity&lt;Client&gt;().ToTable(&quot;Clients&quot;);&#10;            modelBuilder.Entity&lt;TokenManager&gt;().ToTable(&quot;TokenManagers&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectA.Models;&#10;&#10;namespace ProjectA.Data&#10;{&#10;    public class ProjectADbContext : DbContext&#10;    {&#10;        private readonly IConfiguration _configuration;&#10;&#10;        public ProjectADbContext(DbContextOptions&lt;ProjectADbContext&gt; options, IConfiguration configuration)&#10;            : base(options)&#10;        {&#10;            _configuration = configuration;&#10;        }&#10;&#10;        public DbSet&lt;Client&gt; Clients { get; set; }&#10;        public DbSet&lt;TokenManager&gt; TokenManagers { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // 直接從 Configuration 讀取 CustomSchemaName&#10;            var customSchemaName = _configuration[&quot;CustomSchemaName&quot;];&#10;            &#10;            // 如果有設定 CustomSchemaName 就使用它，否則使用專案預設名稱&#10;            var schemaName = !string.IsNullOrEmpty(customSchemaName) ? customSchemaName : &quot;ProjectA&quot;;&#10;            &#10;            modelBuilder.HasDefaultSchema(schemaName);&#10;&#10;            base.OnModelCreating(modelBuilder);&#10;&#10;            // Configure relationships&#10;            modelBuilder.Entity&lt;TokenManager&gt;()&#10;                .HasOne(t =&gt; t.Client)&#10;                .WithMany()&#10;                .HasForeignKey(t =&gt; t.ClientId)&#10;                .OnDelete(DeleteBehavior.Cascade);&#10;&#10;            // Set table names (schema will be applied by HasDefaultSchema)&#10;            modelBuilder.Entity&lt;Client&gt;().ToTable(&quot;Clients&quot;);&#10;            modelBuilder.Entity&lt;TokenManager&gt;().ToTable(&quot;TokenManagers&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectA/Models/DatabaseSettings.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectA/Models/DatabaseSettings.cs" />
              <option name="originalContent" value="namespace ProjectA.Models&#10;{&#10;    public class DatabaseSettings&#10;    {&#10;        public bool UseCustomSchema { get; set; }&#10;        public string? CustomSchemaName { get; set; }&#10;        public string DatabaseProvider { get; set; } = &quot;postgresql&quot;; // 預設為 PostgreSQL&#10;        &#10;        public string GetSchemaName(string defaultProjectName)&#10;        {&#10;            if (UseCustomSchema &amp;&amp; !string.IsNullOrEmpty(CustomSchemaName))&#10;            {&#10;                return CustomSchemaName;&#10;            }&#10;            &#10;            // 根據資料庫類型決定預設 Schema&#10;            return DatabaseProvider.ToLower() switch&#10;            {&#10;                &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; &quot;public&quot;, // PostgreSQL 預設使用專案名稱&#10;                &quot;sqlserver&quot; =&gt; &quot;dbo&quot;, // SQL Server 預設使用 dbo&#10;                &quot;mysql&quot; =&gt; &quot;&quot;, // MySQL 通常不使用 Schema&#10;                &quot;sqlite&quot; =&gt; &quot;&quot;, // SQLite 不支援 Schema&#10;                _ =&gt; defaultProjectName // 其他情況使用專案名稱&#10;            };&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace ProjectA.Models&#10;{&#10;    public class DatabaseSettings&#10;    {&#10;        public string? CustomSchemaName { get; set; }&#10;        public string DatabaseProvider { get; set; } = &quot;postgresql&quot;; // 預設為 PostgreSQL&#10;        &#10;        public string GetSchemaName(string defaultProjectName)&#10;        {&#10;            if (!string.IsNullOrEmpty(CustomSchemaName))&#10;            {&#10;                return CustomSchemaName;&#10;            }&#10;            &#10;            // 根據資料庫類型決定預設 Schema&#10;            return DatabaseProvider.ToLower() switch&#10;            {&#10;                &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; defaultProjectName, // PostgreSQL 預設使用專案名稱&#10;                &quot;sqlserver&quot; =&gt; &quot;dbo&quot;, // SQL Server 預設使用 dbo&#10;                &quot;mysql&quot; =&gt; &quot;&quot;, // MySQL 通常不使用 Schema&#10;                &quot;sqlite&quot; =&gt; &quot;&quot;, // SQLite 不支援 Schema&#10;                _ =&gt; defaultProjectName // 其他情況使用專案名稱&#10;            };&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectA/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectA/Program.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectA.Data;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;&#10;// Add connection string&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;) ??&#10;                       &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;;&#10;&#10;// 使用 PostgreSQL 作為預設資料庫提供者&#10;builder.Services.AddDbContext&lt;ProjectA.Data.ProjectADbContext&gt;(options =&gt;&#10;    &#10;    &#10;    options.UseNpgsql(connectionString,&#10;        sqlOptions =&gt; sqlOptions.MigrationsHistoryTable(&quot;__EFMigrationsHistoryProjectA&quot;))&#10;    &#10;    );&#10;&#10;// Add controllers&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// 初始化資料庫資���&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;ProjectADbContext&gt;();&#10;    //await SeedData.Initialize(context);&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseAuthorization();&#10;app.MapControllers();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;    {&#10;        var forecast = Enumerable.Range(1, 5).Select(index =&gt;&#10;                new WeatherForecast&#10;                (&#10;                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;                    Random.Shared.Next(-20, 55),&#10;                    summaries[Random.Shared.Next(summaries.Length)]&#10;                ))&#10;            .ToArray();&#10;        return forecast;&#10;    })&#10;    .WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;internal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectA.Data;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;&#10;// Add connection string&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;) ??&#10;                       &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;;&#10;&#10;// 使用 PostgreSQL 作為預設資料庫提供者&#10;var customSchemaName = builder.Configuration[&quot;CustomSchemaName&quot;];&#10;builder.Services.AddDbContext&lt;ProjectA.Data.ProjectADbContext&gt;(options =&gt;&#10;{&#10;    var npgsqlOptions = options.UseNpgsql(connectionString,&#10;        sqlOptions =&gt; sqlOptions.MigrationsHistoryTable(&quot;__EFMigrationsHistoryProjectA&quot;));&#10;    &#10;    // 如果有設定 CustomSchemaName 則設定預設 Schema&#10;    if (!string.IsNullOrEmpty(customSchemaName))&#10;    {&#10;        npgsqlOptions.UseDefaultSchema(customSchemaName);&#10;    }&#10;});&#10;&#10;// Add controllers&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// 初始化資料庫資���&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;ProjectADbContext&gt;();&#10;    //await SeedData.Initialize(context);&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseAuthorization();&#10;app.MapControllers();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;    {&#10;        var forecast = Enumerable.Range(1, 5).Select(index =&gt;&#10;                new WeatherForecast&#10;                (&#10;                    DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;                    Random.Shared.Next(-20, 55),&#10;                    summaries[Random.Shared.Next(summaries.Length)]&#10;                ))&#10;            .ToArray();&#10;        return forecast;&#10;    })&#10;    .WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;internal record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectA/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectA/appsettings.json" />
              <option name="originalContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;,&#10;  &quot;CustomSchemaName&quot;: &quot;ProjectA&quot;,&#10;  &quot;DatabaseProvider&quot;: &quot;postgresql&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;,&#10;  &quot;CustomSchemaName&quot;: &quot;ProjectA&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectB/Data/ProjectBDbContext.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectB/Data/ProjectBDbContext.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectB.Models;&#10;&#10;namespace ProjectB.Data&#10;{&#10;    public class ProjectBDbContext : DbContext&#10;    {&#10;        private readonly IConfiguration _configuration;&#10;&#10;        public ProjectBDbContext(DbContextOptions&lt;ProjectBDbContext&gt; options, IConfiguration configuration)&#10;            : base(options)&#10;        {&#10;            _configuration = configuration;&#10;        }&#10;&#10;        public DbSet&lt;MailTemplate&gt; MailTemplates { get; set; }&#10;        public DbSet&lt;SMSConfig&gt; SMSConfigs { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // 直接從 Configuration 根層級讀取設定&#10;            var customSchemaName = _configuration[&quot;CustomSchemaName&quot;];&#10;            var databaseProvider = _configuration[&quot;DatabaseProvider&quot;] ?? &quot;postgresql&quot;;&#10;            &#10;            // 決定要使用的 Schema&#10;            string schemaName;&#10;            if (!string.IsNullOrEmpty(customSchemaName))&#10;            {&#10;                schemaName = customSchemaName;&#10;            }&#10;            else&#10;            {&#10;                // 根據資料庫類型決定預設 Schema&#10;                schemaName = databaseProvider.ToLower() switch&#10;                {&#10;                    &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; &quot;ProjectB&quot;,&#10;                    &quot;sqlserver&quot; =&gt; &quot;dbo&quot;,&#10;                    &quot;mysql&quot; =&gt; &quot;&quot;,&#10;                    &quot;sqlite&quot; =&gt; &quot;&quot;,&#10;                    _ =&gt; &quot;ProjectB&quot;&#10;                };&#10;            }&#10;            &#10;            if (!string.IsNullOrEmpty(schemaName))&#10;            {&#10;                modelBuilder.HasDefaultSchema(schemaName);&#10;            }&#10;&#10;            base.OnModelCreating(modelBuilder);&#10;&#10;            // Set table names (schema will be applied by HasDefaultSchema)&#10;            modelBuilder.Entity&lt;MailTemplate&gt;().ToTable(&quot;MailTemplates&quot;);&#10;            modelBuilder.Entity&lt;SMSConfig&gt;().ToTable(&quot;SMSConfigs&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectB.Models;&#10;&#10;namespace ProjectB.Data&#10;{&#10;    public class ProjectBDbContext : DbContext&#10;    {&#10;        private readonly IConfiguration _configuration;&#10;&#10;        public ProjectBDbContext(DbContextOptions&lt;ProjectBDbContext&gt; options, IConfiguration configuration)&#10;            : base(options)&#10;        {&#10;            _configuration = configuration;&#10;        }&#10;&#10;        public DbSet&lt;MailTemplate&gt; MailTemplates { get; set; }&#10;        public DbSet&lt;SMSConfig&gt; SMSConfigs { get; set; }&#10;&#10;        protected override void OnModelCreating(ModelBuilder modelBuilder)&#10;        {&#10;            // 直接從 Configuration 讀取 CustomSchemaName&#10;            var customSchemaName = _configuration[&quot;CustomSchemaName&quot;];&#10;            &#10;            // 如果有設定 CustomSchemaName 就使用它，否則使用專案預設名稱&#10;            var schemaName = !string.IsNullOrEmpty(customSchemaName) ? customSchemaName : &quot;ProjectB&quot;;&#10;            &#10;            modelBuilder.HasDefaultSchema(schemaName);&#10;&#10;            base.OnModelCreating(modelBuilder);&#10;&#10;            // Set table names (schema will be applied by HasDefaultSchema)&#10;            modelBuilder.Entity&lt;MailTemplate&gt;().ToTable(&quot;MailTemplates&quot;);&#10;            modelBuilder.Entity&lt;SMSConfig&gt;().ToTable(&quot;SMSConfigs&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectB/Models/DatabaseSettings.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectB/Models/DatabaseSettings.cs" />
              <option name="originalContent" value="namespace ProjectB.Models&#10;{&#10;    public class DatabaseSettings&#10;    {&#10;        public bool UseCustomSchema { get; set; }&#10;        public string? CustomSchemaName { get; set; }&#10;        public string DatabaseProvider { get; set; } = &quot;postgresql&quot;; // 預設為 PostgreSQL&#10;        &#10;        public string GetSchemaName(string defaultProjectName)&#10;        {&#10;            if (UseCustomSchema &amp;&amp; !string.IsNullOrEmpty(CustomSchemaName))&#10;            {&#10;                return CustomSchemaName;&#10;            }&#10;            &#10;            // 根據資料庫類型決定預設 Schema&#10;            return DatabaseProvider.ToLower() switch&#10;            {&#10;                &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; defaultProjectName, // PostgreSQL 預設使用專案名稱&#10;                &quot;sqlserver&quot; =&gt; &quot;dbo&quot;, // SQL Server 預設使用 dbo&#10;                &quot;mysql&quot; =&gt; &quot;&quot;, // MySQL 通常不使用 Schema&#10;                &quot;sqlite&quot; =&gt; &quot;&quot;, // SQLite 不支援 Schema&#10;                _ =&gt; defaultProjectName // 其他情況使用專案名稱&#10;            };&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace ProjectB.Models&#10;{&#10;    public class DatabaseSettings&#10;    {&#10;        public string? CustomSchemaName { get; set; }&#10;        public string DatabaseProvider { get; set; } = &quot;postgresql&quot;; // 預設為 PostgreSQL&#10;        &#10;        public string GetSchemaName(string defaultProjectName)&#10;        {&#10;            if (!string.IsNullOrEmpty(CustomSchemaName))&#10;            {&#10;                return CustomSchemaName;&#10;            }&#10;            &#10;            // 根據資料庫類型決定預設 Schema&#10;            return DatabaseProvider.ToLower() switch&#10;            {&#10;                &quot;postgresql&quot; or &quot;npgsql&quot; =&gt; defaultProjectName, // PostgreSQL 預設使用專案名稱&#10;                &quot;sqlserver&quot; =&gt; &quot;dbo&quot;, // SQL Server 預設使用 dbo&#10;                &quot;mysql&quot; =&gt; &quot;&quot;, // MySQL 通常不使用 Schema&#10;                &quot;sqlite&quot; =&gt; &quot;&quot;, // SQLite 不支援 Schema&#10;                _ =&gt; defaultProjectName // 其他情況使用專案名稱&#10;            };&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectB/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectB/Program.cs" />
              <option name="originalContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectB.Data;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;&#10;// Add connection string&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;) ?? &#10;    &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;;&#10;&#10;// 使用 PostgreSQL 作為預設資料庫提供者&#10;builder.Services.AddDbContext&lt;ProjectB.Data.ProjectBDbContext&gt;(options =&gt;&#10;    options.UseNpgsql(connectionString,&#10;        sqlOptions =&gt; sqlOptions.MigrationsHistoryTable(&quot;__EFMigrationsHistoryProjectB&quot;)));&#10;&#10;// Add controllers&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// 初始化資料庫資料&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;ProjectBDbContext&gt;();&#10;    await SeedData.Initialize(context);&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseAuthorization();&#10;app.MapControllers();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;{&#10;    var forecast =  Enumerable.Range(1, 5).Select(index =&gt;&#10;        new WeatherForecast&#10;        (&#10;            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;            Random.Shared.Next(-20, 55),&#10;            summaries[Random.Shared.Next(summaries.Length)]&#10;        ))&#10;        .ToArray();&#10;    return forecast;&#10;})&#10;.WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}&#10;" />
              <option name="updatedContent" value="using Microsoft.EntityFrameworkCore;&#10;using ProjectB.Data;&#10;&#10;var builder = WebApplication.CreateBuilder(args);&#10;&#10;// Add services to the container.&#10;// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi&#10;builder.Services.AddOpenApi();&#10;&#10;// Add connection string&#10;var connectionString = builder.Configuration.GetConnectionString(&quot;DefaultConnection&quot;) ?? &#10;    &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;;&#10;&#10;// 使用 PostgreSQL 作為預設資料庫提供者&#10;var customSchemaName = builder.Configuration[&quot;CustomSchemaName&quot;];&#10;builder.Services.AddDbContext&lt;ProjectB.Data.ProjectBDbContext&gt;(options =&gt;&#10;{&#10;    var npgsqlOptions = options.UseNpgsql(connectionString,&#10;        sqlOptions =&gt; sqlOptions.MigrationsHistoryTable(&quot;__EFMigrationsHistoryProjectB&quot;));&#10;    &#10;    // 如果有設定 CustomSchemaName 則設定預設 Schema&#10;    if (!string.IsNullOrEmpty(customSchemaName))&#10;    {&#10;        npgsqlOptions.UseDefaultSchema(customSchemaName);&#10;    }&#10;});&#10;&#10;// Add controllers&#10;builder.Services.AddControllers();&#10;builder.Services.AddEndpointsApiExplorer();&#10;&#10;var app = builder.Build();&#10;&#10;// 初始化資料庫資料&#10;using (var scope = app.Services.CreateScope())&#10;{&#10;    var services = scope.ServiceProvider;&#10;    var context = services.GetRequiredService&lt;ProjectBDbContext&gt;();&#10;    await SeedData.Initialize(context);&#10;}&#10;&#10;// Configure the HTTP request pipeline.&#10;if (app.Environment.IsDevelopment())&#10;{&#10;    app.MapOpenApi();&#10;}&#10;&#10;app.UseHttpsRedirection();&#10;app.UseAuthorization();&#10;app.MapControllers();&#10;&#10;var summaries = new[]&#10;{&#10;    &quot;Freezing&quot;, &quot;Bracing&quot;, &quot;Chilly&quot;, &quot;Cool&quot;, &quot;Mild&quot;, &quot;Warm&quot;, &quot;Balmy&quot;, &quot;Hot&quot;, &quot;Sweltering&quot;, &quot;Scorching&quot;&#10;};&#10;&#10;app.MapGet(&quot;/weatherforecast&quot;, () =&gt;&#10;{&#10;    var forecast =  Enumerable.Range(1, 5).Select(index =&gt;&#10;        new WeatherForecast&#10;        (&#10;            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),&#10;            Random.Shared.Next(-20, 55),&#10;            summaries[Random.Shared.Next(summaries.Length)]&#10;        ))&#10;        .ToArray();&#10;    return forecast;&#10;})&#10;.WithName(&quot;GetWeatherForecast&quot;);&#10;&#10;app.Run();&#10;&#10;record WeatherForecast(DateOnly Date, int TemperatureC, string? Summary)&#10;{&#10;    public int TemperatureF =&gt; 32 + (int)(TemperatureC / 0.5556);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ProjectB/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ProjectB/appsettings.json" />
              <option name="originalContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;,&#10;  &quot;CustomSchemaName&quot;: &quot;ProjectB&quot;,&#10;  &quot;DatabaseProvider&quot;: &quot;postgresql&quot;&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;ConnectionStrings&quot;: {&#10;    &quot;DefaultConnection&quot;: &quot;Host=localhost;Port=5432;Database=desk;User ID=postgres;Password=postgres;&quot;&#10;  },&#10;  &quot;Logging&quot;: {&#10;    &quot;LogLevel&quot;: {&#10;      &quot;Default&quot;: &quot;Information&quot;,&#10;      &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot;&#10;    }&#10;  },&#10;  &quot;AllowedHosts&quot;: &quot;*&quot;,&#10;  &quot;CustomSchemaName&quot;: &quot;ProjectB&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>